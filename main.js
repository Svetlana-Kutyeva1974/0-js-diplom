!function(){"use strict";function t(t,e){let s="";return s=0===t?"top-left":t===e-1?"top-right":t===e**2-e?"bottom-left":t===e**2-1?"bottom-right":t>0&&t<e?"top":t>e**2-e&&t<e**2-1?"bottom":t%2==1&&t%e==e-1?"right":t%2==0&&t%e==0?"left":"center",s}class e{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(t){if(!(t instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=t}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(t=>this.onNewGameClick(t))),this.saveGameEl.addEventListener("click",(t=>this.onSaveGameClick(t))),this.loadGameEl.addEventListener("click",(t=>this.onLoadGameClick(t))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const s=document.createElement("div");s.classList.add("cell","map-tile",`map-tile-${t(e,this.boardSize)}`),s.addEventListener("mouseenter",(t=>this.onCellEnter(t))),s.addEventListener("mouseleave",(t=>this.onCellLeave(t))),s.addEventListener("click",(t=>this.onCellClick(t))),this.boardEl.appendChild(s)}this.cells=Array.from(this.boardEl.children)}redrawPositions(t){for(const t of this.cells)t.innerHTML="";for(const s of t){const t=this.boardEl.children[s.position],a=document.createElement("div");a.classList.add("character",s.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((e=s.character.health)<15?"critical":e<50?"normal":"high")),r.style.width=`${s.character.health}%`,i.appendChild(r),a.appendChild(i),t.appendChild(a)}var e}addCellEnterListener(t){this.cellEnterListeners.push(t)}addCellLeaveListener(t){this.cellLeaveListeners.push(t)}addCellClickListener(t){this.cellClickListeners.push(t)}addNewGameListener(t){this.newGameListeners.push(t)}addSaveGameListener(t){this.saveGameListeners.push(t)}addLoadGameListener(t){this.loadGameListeners.push(t)}onCellEnter(t){t.preventDefault();const e=this.cells.indexOf(t.currentTarget);this.cellEnterListeners.forEach((t=>t.call(null,e)))}onCellLeave(t){t.preventDefault();const e=this.cells.indexOf(t.currentTarget);this.cellLeaveListeners.forEach((t=>t.call(null,e)))}onCellClick(t){const e=this.cells.indexOf(t.currentTarget);this.cellClickListeners.forEach((t=>t.call(null,e)))}onNewGameClick(t){t.preventDefault(),console.log("начинаем новую игру, this, event",this,t),this.newGameListeners.forEach((t=>t.call(null)))}onSaveGameClick(t){t.preventDefault(),this.saveGameListeners.forEach((t=>t.call(null))),console.log("сохраняем новую игру, this, event",this,t)}onLoadGameClick(t){t.preventDefault(),this.loadGameListeners.forEach((t=>t.call(null))),console.log("загружаем новую игру(восстановление), this, event",this,t)}static showError(t){alert(t)}static showMessage(t){alert(t)}selectCell(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"yellow";this.deselectCell(t),this.cells[t].classList.add("selected",`selected-${e}`)}deselectCell(t){const e=this.cells[t];e.classList.remove(...Array.from(e.classList).filter((t=>t.startsWith("selected"))))}showCellTooltip(t,e){this.cells[e].title=t}hideCellTooltip(t){this.cells[t].title=""}showDamage(t,e){return new Promise((s=>{const a=this.cells[t],i=document.createElement("span");i.textContent=e,i.classList.add("damage"),a.appendChild(i),i.addEventListener("animationend",(()=>{a.removeChild(i),s()}))}))}setCursor(t){this.boardEl.style.cursor=t}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}class s{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"generic";if(this.level=t,this.attack=0,this.defence=0,this.health=50,this.type=e,"Character"===new.target.name)throw new Error('user use "new Character()"')}levelUp(){if(0===this.health)throw new Error("Нельзя повысить уровень умершего");this.level+=1,this.attack=Math.max(this.attack,+(this.attack*(1.8-(1-this.health/100))).toFixed()),this.defence=Math.max(this.attack,+(this.attack*(1.8-(1-this.health/100))).toFixed()),this.health+=80,this.health>=100&&(this.health=100)}damage(t){if(!(this.health>=0))throw new Error("Ошибка, уровень жизни игрока меньше нуля");this.health-=t*(1-this.defence/100).toFixed()}}class a extends s{constructor(){super(...arguments),this.attack=25,this.defence=25,this.distance=2,this.attackDistance=2}}class i{constructor(){this.members=new Set}[Symbol.iterator](){let t=0;const e=this.members.size-1;return{next:()=>t<=e?(t+=1,{done:!1,value:t}):{done:!0}}}funcIterator(){for(const t of this)console.log(t,this.members[Symbol.iterator]().next().value)}add(t){this.members.add(t)}addAll(){for(var t=arguments.length,e=new Array(t),s=0;s<t;s++)e[s]=arguments[s];for(const t of e)this.members.add(t)}delete(t){this.members.delete(t),console.log("команда после удаления!!!!",t,this.members)}toArray(){return[...this.members]}}let r;function*l(t,e,s){for(let a=t;a<=e;a+=s)yield a}function h(t,e){return Math.floor(Math.random()*(e-t+1))+t}function*o(t,e){let s=e;const i=h(0,t.length-1),l=`${t[i]}`;console.log("игрок : random, тип ",i,l),e>1&&(s=h(1,e)),r=t[0]===a?["Bowman","Swordsman","Magician"]:["Undead","Daemon","Vampire"],yield new t[i](s,r[i].toLowerCase())}function c(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;const a=new i;for(let i=0;i<s;i+=1)console.log(`генерируем в кол-ве${s}`,o(t,e).next().value),a.add(o(t,e).next().value);return a}function n(t,e){const s=[],a=function*(t,e){yield*l(t,e-1,8),yield*l(t+1,e,8)}(t,e-1);for(const t of a)console.log("генерируем массив",t),s.push(t);return s}class m extends s{constructor(){super(...arguments),this.attack=40,this.defence=10,this.distance=4,this.attackDistance=1}}class d extends s{constructor(){super(...arguments),this.attack=40,this.defence=10,this.distance=1,this.attackDistance=4}}class C extends s{constructor(){super(...arguments),this.attack=10,this.defence=40,this.distance=1,this.attackDistance=4}}class v extends s{constructor(){super(...arguments),this.attack=10,this.defence=40,this.distance=1,this.attackDistance=4}}class g extends s{constructor(){super(...arguments),this.attack=25,this.defence=25,this.distance=2,this.attackDistance=2}}class y{constructor(t,e){if(!(t instanceof s))throw new Error("character must be instance of Character or its children");if("number"!=typeof e)throw new Error("position must be a number");this.character=t,this.position=e}}var u={level1:"prairie",level2:"desert",level3:"arctic",level4:"mountain"};class P{static from(t){const{health:e,level:s,activePlayer:a,characterCount:i,ArrayOfPositionCharacter:r,scope:l,teamUser:h,teamComputer:o,activeCell:c,activeTeam:n}=t;return{health:e,level:s,activePlayer:a,characterCount:i,ArrayOfPositionCharacter:r,scope:l,teamUser:h,teamComputer:o,activeCell:c,activeTeam:n}}constructor(){this.health=50,this.level=1,this.activePlayer=void 0,this.ArrayOfPositionCharacter=[],this.characterCount=2,this.scope=[],this.teamUser=new i,this.teamComputer=new i,this.activeCell=-1,this.activeTeam=this.teamUser}}var f="auto",p="pointer",w="crosshair",L="not-allowed";const k=new e;k.bindToDOM(document.querySelector("#game-container"));const A=new class{constructor(t){this.storage=t}save(t){this.storage.setItem("state",JSON.stringify(t))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(t){throw new Error("Invalid state")}}}(localStorage),b=new class{constructor(t,e){this.gamePlay=t,this.stateService=e}getArrayPositions(t,e,s){let a=0;for(const i of s.members){do{a=t[h(0,t.length-1)]}while(-1!==e.indexOf(a));e.push(a),this.state.ArrayOfPositionCharacter.push(new y(i,a))}}initGameDraw(){const t=this.gamePlay.boardSize,e=t**2,s=n(0,e-t+1);console.log("получили массив юзера",s);const i=n(0+t-2,e-1);console.log("получили массив компа",i),1===this.state.level?(this.state.teamUser=c([a,m,C],this.state.level,this.state.characterCount),this.state.teamComputer=c([d,v,g],this.state.level,this.state.characterCount)):(this.state.teamUser.addAll(...c([a,m,C],this.state.level-1,this.state.characterCount).members),this.state.teamComputer.addAll(...c([d,v,g],this.state.level,this.state.teamUser.members.size).members)),console.log("генерируем team",this.state.teamUser,this.state.teamUser.members.size,this.state.teamComputer,this.state.teamComputer.members.size),this.state.ArrayOfPositionCharacter=[],this.getArrayPositions(s,[],this.state.teamUser),this.getArrayPositions(i,[],this.state.teamComputer),console.log("char генератор",this.state.ArrayOfPositionCharacter),console.log("массив позиций",this.state.ArrayOfPositionCharacter,this.state.ArrayOfPositionCharacter[0])}init(){this.state=new P,this.gamePlay.drawUi(u[`level${this.state.level}`]),this.gamePlay.addNewGameListener((()=>this.onNewGame())),this.gamePlay.addSaveGameListener((()=>this.onSaveGame())),this.gamePlay.addLoadGameListener((()=>this.onLoadGame())),this.gamePlay.addCellEnterListener((t=>this.onCellEnter(t))),this.gamePlay.addCellClickListener((t=>this.onCellClick(t))),this.gamePlay.addCellLeaveListener((t=>this.onCellLeave(t)))}getCharacter(t){return this.state.ArrayOfPositionCharacter.find((e=>e.position===t))}findChar(t){return this.state.ArrayOfPositionCharacter.findIndex((e=>e.character===t))}getCharIndex(t){return this.state.ArrayOfPositionCharacter.findIndex((e=>e.position===t))}isCharUser(t){const e=this.getCharacter(t);return this.state.teamUser.toArray().find((t=>t===e.character))}isCharComp(t){const e=this.getCharacter(t);return this.state.teamComputer.toArray().find((t=>t===e.character))}isCharInTeam(t){const e=this.getCharacter(t);return this.state.activeTeam.toArray().find((t=>t===e.character))||void 0}async onCellClick(t){if(console.log("this+index+актив команда click",this,t,this.state.activeTeam),-1!==this.state.activeCell&&void 0!==this.state.activePlayer&&this.gamePlay.deselectCell(this.state.activeCell),-1===this.state.activeCell)do{this.getCharacter(t)&&(this.isCharUser(t)?(this.gamePlay.selectCell(t,"yellow"),this.state.activeCell=t,this.state.activePlayer=this.getCharacter(t).character,console.log("click на персонаже юзера!!!",this.state.activePlayer,this.state.activeTeam)):e.showError("Не Ваш персонаж"))}while(-1===this.state.activeCell);else if(this.getCharacter(t))if(this.isCharInTeam(t))this.gamePlay.setCursor(p),console.log("входит в команду- значит перевыбор"),this.gamePlay.selectCell(t,"yellow"),this.state.activeCell=t,this.state.activePlayer=this.getCharacter(t).character,console.log("click на новом персонаже юзера!!!",this.state.activePlayer,this.state.activeTeam);else if(this.checkAllowPoints(t,this.state.activePlayer.attackDistance)){console.log("возможна атака"),this.gamePlay.deselectCell(t);const e=this.state.activePlayer,s=this.getCharacter(t).character,a=this.getCharacter(t).position;console.log("командf противника",this.state.teamComputer),console.log("цель в команде противника",s);const i=Math.max(e.attack-s.defence,.1*e.attack).toFixed();await this.gamePlay.showDamage(t,i),console.log("атака прошла урон противнику:",i),s.health-=i,this.gamePlay.setCursor(p),s.health<=0&&(console.log(" удаление этого элемента в массиве позиций:",a),this.deleteChar(this.getCharIndex(a)),this.state.teamComputer.delete(s),console.log("команда компа после удаления:",this.state.teamComputer),this.checkState()),this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter),this.transferComp()}else e.showError("Атака не возможна!!!");else if(!this.getCharacter(t)&&this.checkAllowPoints(t,this.state.activePlayer.distance)){console.log("возможно перемещение"),this.gamePlay.deselectCell(this.state.activeCell),this.gamePlay.selectCell(t,"yellow"),console.log("array position before",this.state.ArrayOfPositionCharacter,this.state.activeCell,t,"данные \n",this.getCharIndex(this.state.activeCell),new y(this.getCharacter(this.state.activeCell).character,t));const e=this.state.ArrayOfPositionCharacter.indexOf(this.getCharacter(this.state.activeCell));this.state.ArrayOfPositionCharacter.splice(e,1,new y(this.getCharacter(this.state.activeCell).character,t)),console.log("array position new",this.state.ArrayOfPositionCharacter,this.state.activeCell,t),this.gamePlay.deselectCell(this.state.activeCell),this.state.activeCell=t,this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter),this.gamePlay.selectCell(t,"yellow"),this.transferComp()}else this.getCharacter(t)||this.checkAllowPoints(t,this.state.activePlayer.distance)||e.showError("Перемещение не возможно!!!")}showTools(t){const{character:e,position:s}=t,a=`🎖${e.level}⚔${e.attack}🛡${e.defence}❤${e.health}`;this.gamePlay.showCellTooltip(a,s)}onCellEnter(t){const e=this.getCharacter(t);void 0!==e?(this.showTools(e),this.state.activePlayer&&!this.isCharInTeam(t)&&(this.checkAllowPoints(t,this.state.activePlayer.attackDistance)?(this.gamePlay.selectCell(t,"red"),this.gamePlay.setCursor(w)):this.gamePlay.setCursor(L))):this.state.activePlayer&&(this.checkAllowPoints(t,this.state.activePlayer.distance)?(this.gamePlay.selectCell(t,"green"),this.gamePlay.setCursor(p)):this.gamePlay.setCursor(L))}onCellLeave(t){this.getCharacter(t)?(this.gamePlay.hideCellTooltip(t),this.isCharInTeam(t)&&this.isCharUser(t)===this.state.activePlayer&&0!==this.state.teamUser.members.size&&this.gamePlay.selectCell(t,"yellow")):this.gamePlay.deselectCell(t),this.getCharacter(t)&&!this.isCharInTeam(t)&&this.gamePlay.deselectCell(t),this.gamePlay.setCursor(f)}onNewGame(){this.state=new P,this.gamePlay.drawUi(u[`level${this.state.level}`]),this.initGameDraw(),this.state.activeTeam=this.state.teamUser,this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter),e.showMessage(`Level ${this.state.level}`)}onSaveGame(){this.stateService.save(this.state),console.log("saving",this.state),e.showMessage(`Please, wait, saving: Level ${this.state.level}`),this.gamePlay.drawUi(u[`level${this.state.level}`])}onLoadGame(){e.showMessage("Please, wait, loading..."),this.state=new P;let t=new P;t=this.stateService.load(),this.state=t,this.state=P.from(t),this.state.activeCell=t.activeCell,this.state.characterCount=t.characterCount,this.state.activePlayer=t.activePlayer,this.state.scope=t.scope,this.state.scopeMax=t.scopeMax,console.log("loading обьек+ this state",t,this.state,this.state.health,this.state.activeCell),console.log("\n",this.state.ArrayOfPositionCharacter,this.state.characterCount,this.state.activePlayer),console.log("loading пробуем извлечь",this.state),this.fillTeamsAfterLoad(P.from(t).ArrayOfPositionCharacter),console.log("команды такие:",this.state.teamComputer,this.state.teamUser),this.gamePlay.drawUi(u[`level${this.state.level}`]),this.gamePlay.addNewGameListener((()=>this.onNewGame())),this.gamePlay.addSaveGameListener((()=>this.onSaveGame())),this.gamePlay.addLoadGameListener((()=>this.onLoadGame())),this.gamePlay.addCellEnterListener((t=>this.onCellEnter(t))),this.gamePlay.addCellClickListener((t=>this.onCellClick(t))),this.gamePlay.addCellLeaveListener((t=>this.onCellLeave(t))),this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter),e.showMessage(`Level ${this.state.level}`),this.gamePlay.selectCell(this.state.activeCell,"yellow")}calcPoints(t,e){const s=this.gamePlay.boardSize,a=[],i=[],r=[],l=[],h=[];for(let t=0;t<s**2;t+=s)i.push(t),r.push(t+s-1);for(let t=0;t<s;t+=1)l.push(t),h.push(s**2-1-t);for(let o=1;o<=e;o+=1){if(l.includes(t)?a.push(t+s*o):(h.includes(t)||a.push(t+s*o),a.push(t-s*o)),!i.includes(t-(o-1))){a.push(t-o),a.push(t-(s*o+o)),a.push(t+(s*o-o));for(let e=1;e<=o-1;e+=1)a.push(t+(s-1)*o-s*e),a.push(t-(s+1)*o+s*e),a.push(t+(s-1)*o+e),a.push(t-(s+1)*o+e)}if(!r.includes(t+(o-1))){a.push(t+o),a.push(t-(s*o-o)),a.push(t+(s*o+o));for(let e=1;e<=o-1;e+=1)a.push(t-(s-1)*o+s*e),a.push(t+(s+1)*o-s*e),a.push(t-(s-1)*o-e),a.push(t+(s+1)*o-e)}}return a.filter((t=>t>=0&&t<=s**2-1))}checkAllowPoints(t,e){const s=this.calcPoints(this.state.activeCell,e),a=s.includes(t);return console.log("все теоретически допустимые перемещения/атака\n",s,a),a}deleteChar(t){this.state.ArrayOfPositionCharacter.splice(t,1),this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter)}async transferComp(){const t=this.state.activeCell,e=this.state.activePlayer;this.state.activeTeam=this.state.teamComputer,console.log("меняем актив команду",this.state.activeTeam);const s=this.state.teamUser.toArray(),a=this.state.ArrayOfPositionCharacter.length,i=h(s.length,a-1);console.log("инд противника в масс ArrayOfPositionCharacter ",i);const{character:r,position:l}=this.state.ArrayOfPositionCharacter[i];this.state.activePlayer=this.getCharacter(l).character,this.state.activeCell=l,console.log("игрок противника",l,r.type,this.state.ArrayOfPositionCharacter[i]),console.log("лицо игрока противника",this.state.activePlayer);let o=this.state.ArrayOfPositionCharacter[0].position;for(let t=1;t<this.state.teamUser.toArray().length;t+=1)this.state.ArrayOfPositionCharacter[t].position-l<=o-l&&(o=this.state.ArrayOfPositionCharacter[t].position);const c=this.calcPoints(l,this.state.activePlayer.attackDistance),n=this.checkAllow(this.calcPoints(l,this.state.activePlayer.distance)),m=c.includes(o);if(m){console.log("возможна атака, т.к есть персонаж в зоне атаки\n value",m),console.log("массив для атаки\n",c);const e=r,s=this.getCharacter(o).character;console.log("команда юзерс персон",this.state.teamUser),console.log("цель среди юзерс персон",s);const a=Math.max(e.attack-s.defence,.1*e.attack).toFixed();await this.gamePlay.showDamage(o,a),console.log("атака прошла урон:",a),s.health-=a,o===t&&this.gamePlay.selectCell(t,"yellow"),s.health<=0&&(console.log(" удаляем этот элемент в позиционном массиве:",this.getCharIndex(o)),this.deleteChar(this.getCharIndex(o)),this.state.teamUser.delete(s),console.log("команда юзера после удаления:",this.state.teamUser),o===t&&(this.gamePlay.deselectCell(t),this.state.activeCell=-1,this.state.activePlayer=void 0,this.state.activeTeam=this.state.teamUser),this.checkState()),this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter)}else{const t=h(0,n.length-1);console.log(" индекс в массиве допустим перемещ и сам массив ",t,n);const e=n[t];console.log("новая выбранная поциция комп",e),console.log("array position before",this.state.ArrayOfPositionCharacter,l,e,"данные \n",this.getCharIndex(l));const s=this.state.ArrayOfPositionCharacter.indexOf(this.getCharacter(l));this.state.ArrayOfPositionCharacter.splice(s,1,new y(this.getCharacter(l).character,e)),console.log("array position new",this.state.ArrayOfPositionCharacter,l,e),this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter)}this.state.activeTeam=this.state.teamUser,-1!==this.state.activeCell&&(this.state.activeCell=t,this.state.activePlayer=e,this.gamePlay.selectCell(t,"yellow"))}onNextLevelGame(){switch(this.state.level){case 2:this.state.characterCount=1;break;case 3:case 4:this.state.characterCount=2}this.state.activePlayer=void 0,this.state.ArrayOfPositionCharacter=[],this.state.activeCell=-1,this.gamePlay.drawUi(u[`level${this.state.level}`]),this.initGameDraw(),this.state.activeTeam=this.state.teamUser,this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter),e.showMessage(`Level ${this.state.level}`)}newLevel(){let t="";4===this.state.level?(console.log("Игра окончена"),0===this.state.teamUser.members.size?t+="Игра окончена. Поражение!":t+="Победа!!!",e.showMessage(`${t}\nКол-во набранных очков: ${this.scopeSum()}\n\n      Максимальное число очков: ${Math.max(...this.state.scope)}`),this.endGame()):this.state.level<4&&0!==this.state.teamUser.members.size?(t=`Уровень ${this.state.level} пройден. Играем дальше!`,e.showMessage(`${t}\nКол-во набранных очков: ${this.scopeSum()}\n\n      Максимальное число очков: ${Math.max(...this.state.scope)}`),this.state.level+=1,this.state.teamUser.members.forEach((t=>t.levelUp())),this.onNextLevelGame()):(t="Игра окончена. Поражение!",e.showMessage(`${t}\nКол-во набранных очков: ${this.scopeSum()}\n\n      Максимальное число очков: ${Math.max(...this.state.scope)}`),this.endGame())}checkState(){0!==this.state.teamUser.members.size&&0!==this.state.teamComputer.members.size||this.newLevel()}checkAllow(t){return-1!==t.indexOf(this.state.activeCell)&&t.splice(t.indexOf(this.state.activeCell),1),this.state.ArrayOfPositionCharacter.forEach((e=>{t.includes(e.position)&&t.splice(t.indexOf(e.position),1)})),t}scopeSum(){let t=0;return t+=this.state.teamUser.toArray().reduce(((t,e)=>t+e.health),0),this.state.scope.push(t),console.log("на уровне набрано очков:",t),t}fillTeamsAfterLoad(t){this.state.teamUser=new i,this.state.teamComputer=new i,this.state.activeTeam=new i,this.state.ArrayOfPositionCharacter=[],console.log("работаем с массивом загрузки:===",t),t.forEach(((t,e,s)=>{const i=t.character.type;let r;switch(console.log("pleer type:",i,t.character),i){case"bowman":r=a;break;case"swordsman":r=m;break;case"magician":r=C;break;case"undead":r=d;break;case"vampire":r=g;break;case"daemon":r=v}const l=new r(t.character.level);l.type=t.character.type,l.health=t.character.health,l.attackDistance=t.character.attackDistance,l.distance=t.character.distance,l.attack=t.character.attack,l.defence=t.character.defence,["bowman","swordsman","magician"].includes(t.character.type)?(this.state.teamUser.add(l),console.log("pleer:",t.character,l,this.state.teamUser),console.log("arr this state position:===",s)):this.state.teamComputer.add(l),this.state.ArrayOfPositionCharacter.push(new y(l,t.position)),console.log("arr после замены this state position:===",this.state.ArrayOfPositionCharacter)})),this.state.teamUser.toArray().includes(this.activePlayer)?this.state.activeTeam=this.state.teamUser:this.state.activeTeam=this.state.teamComputer,console.log("active team pleer:",this.state.activeTeam),console.log("active this state position:===",this.state.ArrayOfPositionCharacter)}endGame(){this.container=null,this.boardEl=null,this.cells=[],this.gamePlay.cellClickListeners=[],this.gamePlay.cellEnterListeners=[],this.gamePlay.cellLeaveListeners=[],this.gamePlay.newGameListeners=[],this.gamePlay.saveGameListeners=[],this.gamePlay.loadGameListeners=[],this.state.ArrayOfPositionCharacter=[],this.gamePlay.redrawPositions(this.state.ArrayOfPositionCharacter)}}(k,A);b.init()}();